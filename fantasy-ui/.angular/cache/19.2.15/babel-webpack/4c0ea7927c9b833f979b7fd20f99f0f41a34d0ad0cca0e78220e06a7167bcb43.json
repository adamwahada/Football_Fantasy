{"ast":null,"code":"import { inject } from '@angular/core';\nimport { KeycloakService } from './keycloak.service';\nimport { from, throwError } from 'rxjs';\nimport { switchMap, catchError } from 'rxjs/operators';\nexport const AuthInterceptor = (req, next) => {\n  const keycloakService = inject(KeycloakService);\n  console.log('=== Intercepting request ===');\n  console.log('URL:', req.url);\n  console.log('Method:', req.method);\n  // Skip authentication for non-API requests\n  if (!req.url.includes('/api/')) {\n    console.log('Skipping non-API request');\n    return next(req);\n  }\n  // If request already has Authorization header, pass it through\n  if (req.headers.has('Authorization')) {\n    console.log('Request already has Authorization header');\n    return next(req);\n  }\n  // Get token and add to request\n  return from(keycloakService.getValidToken()).pipe(switchMap(token => {\n    if (!token) {\n      console.log('No token available, redirecting to login...');\n      keycloakService.login();\n      return throwError(() => new Error('No token available'));\n    }\n    // Clone request with token\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${token}`)\n    });\n    console.log('=== Modified request ===');\n    console.log('Authorization header added:', !!authReq.headers.get('Authorization'));\n    console.log('Token length:', token.length);\n    return next(authReq).pipe(catchError(error => {\n      console.error('=== Request failed ===');\n      console.error('Error status:', error.status);\n      console.error('Error message:', error.message);\n      console.error('Error url:', error.url);\n      if (error.status === 401 || error.status === 403) {\n        console.log('Authentication/Authorization failed, attempting token refresh...');\n        return from(keycloakService.getValidToken()).pipe(switchMap(newToken => {\n          if (newToken && newToken !== token) {\n            console.log('New token obtained, retrying request');\n            const retryReq = req.clone({\n              headers: req.headers.set('Authorization', `Bearer ${newToken}`)\n            });\n            return next(retryReq);\n          } else {\n            console.log('Token refresh failed, redirecting to login');\n            keycloakService.login();\n            return throwError(() => error);\n          }\n        }), catchError(() => {\n          keycloakService.login();\n          return throwError(() => error);\n        }));\n      }\n      return throwError(() => error);\n    }));\n  }), catchError(error => {\n    console.error('Failed to get token:', error);\n    keycloakService.login();\n    return throwError(() => error);\n  }));\n};","map":{"version":3,"names":["inject","KeycloakService","from","throwError","switchMap","catchError","AuthInterceptor","req","next","keycloakService","console","log","url","method","includes","headers","has","getValidToken","pipe","token","login","Error","authReq","clone","set","get","length","error","status","message","newToken","retryReq"],"sources":["C:\\Users\\adamw\\Football_Fantasy\\fantasy-ui\\src\\app\\auth.interceptor.ts"],"sourcesContent":["import { HttpInterceptorFn, HttpRequest, HttpHandlerFn, HttpErrorResponse } from '@angular/common/http';\r\nimport { inject } from '@angular/core';\r\nimport { KeycloakService } from './keycloak.service';\r\nimport { from, throwError } from 'rxjs';\r\nimport { switchMap, catchError } from 'rxjs/operators';\r\n\r\nexport const AuthInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next: HttpHandlerFn) => {\r\n  const keycloakService = inject(KeycloakService);\r\n  \r\n  console.log('=== Intercepting request ===');\r\n  console.log('URL:', req.url);\r\n  console.log('Method:', req.method);\r\n  \r\n  // Skip authentication for non-API requests\r\n  if (!req.url.includes('/api/')) {\r\n    console.log('Skipping non-API request');\r\n    return next(req);\r\n  }\r\n  \r\n  // If request already has Authorization header, pass it through\r\n  if (req.headers.has('Authorization')) {\r\n    console.log('Request already has Authorization header');\r\n    return next(req);\r\n  }\r\n\r\n  // Get token and add to request\r\n  return from(keycloakService.getValidToken()).pipe(\r\n    switchMap(token => {\r\n      if (!token) {\r\n        console.log('No token available, redirecting to login...');\r\n        keycloakService.login();\r\n        return throwError(() => new Error('No token available'));\r\n      }\r\n\r\n      // Clone request with token\r\n      const authReq = req.clone({\r\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\r\n      });\r\n\r\n      console.log('=== Modified request ===');\r\n      console.log('Authorization header added:', !!authReq.headers.get('Authorization'));\r\n      console.log('Token length:', token.length);\r\n\r\n      return next(authReq).pipe(\r\n        catchError((error: HttpErrorResponse) => {\r\n          console.error('=== Request failed ===');\r\n          console.error('Error status:', error.status);\r\n          console.error('Error message:', error.message);\r\n          console.error('Error url:', error.url);\r\n          \r\n          if (error.status === 401 || error.status === 403) {\r\n            console.log('Authentication/Authorization failed, attempting token refresh...');\r\n            return from(keycloakService.getValidToken()).pipe(\r\n              switchMap(newToken => {\r\n                if (newToken && newToken !== token) {\r\n                  console.log('New token obtained, retrying request');\r\n                  const retryReq = req.clone({\r\n                    headers: req.headers.set('Authorization', `Bearer ${newToken}`)\r\n                  });\r\n                  return next(retryReq);\r\n                } else {\r\n                  console.log('Token refresh failed, redirecting to login');\r\n                  keycloakService.login();\r\n                  return throwError(() => error);\r\n                }\r\n              }),\r\n              catchError(() => {\r\n                keycloakService.login();\r\n                return throwError(() => error);\r\n              })\r\n            );\r\n          }\r\n          \r\n          return throwError(() => error);\r\n        })\r\n      );\r\n    }),\r\n    catchError(error => {\r\n      console.error('Failed to get token:', error);\r\n      keycloakService.login();\r\n      return throwError(() => error);\r\n    })\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}