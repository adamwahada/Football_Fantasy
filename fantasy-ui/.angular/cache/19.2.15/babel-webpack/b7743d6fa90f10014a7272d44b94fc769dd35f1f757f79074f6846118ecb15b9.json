{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/adamw/Football_Auth_Template/fantasy-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Keycloak from 'keycloak-js';\nimport * as i0 from \"@angular/core\";\nexport class KeycloakService {\n  keycloak;\n  isInitialized = false;\n  initPromise = null;\n  cachedRoles = null;\n  constructor() {\n    this.keycloak = new Keycloak({\n      url: 'http://localhost:8180',\n      realm: 'football-fantasy',\n      clientId: 'angular-client'\n    });\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.initPromise) {\n        return _this.initPromise;\n      }\n      _this.initPromise = _asyncToGenerator(function* () {\n        try {\n          const authenticated = yield _this.keycloak.init({\n            onLoad: 'login-required',\n            checkLoginIframe: false,\n            pkceMethod: 'S256',\n            enableLogging: true,\n            silentCheckSsoRedirectUri: window.location.origin + '/assets/silent-check-sso.html'\n          });\n          _this.isInitialized = true;\n          console.log('=== Keycloak Initialization ===');\n          console.log('Authenticated:', authenticated);\n          console.log('Token:', _this.keycloak.token ? 'Present' : 'Missing');\n          console.log('Token Parsed:', _this.keycloak.tokenParsed);\n          console.log('Roles:', yield _this.getUserRoles()); // FIX: await the promise\n          return authenticated;\n        } catch (error) {\n          console.error('Keycloak initialization failed:', error);\n          _this.isInitialized = false;\n          _this.initPromise = null;\n          return false;\n        }\n      })();\n      return _this.initPromise;\n    })();\n  }\n  getValidToken() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.isInitialized) {\n        console.error('Keycloak not initialized');\n        throw new Error('Keycloak not initialized');\n      }\n      try {\n        console.log('=== Getting Valid Token ===');\n        console.log('Current token:', _this2.keycloak.token ? 'Present' : 'Missing');\n        const updated = yield _this2.keycloak.updateToken(30);\n        console.log('Token updated:', updated);\n        const token = _this2.keycloak.token || '';\n        console.log('Token length:', token.length);\n        console.log('Token preview:', token.substring(0, 50) + '...');\n        return token;\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        _this2.keycloak.login();\n        throw error;\n      }\n    })();\n  }\n  login() {\n    console.log('Redirecting to login...');\n    this.keycloak.login();\n  }\n  getUsername() {\n    return this.keycloak.tokenParsed?.['preferred_username'] || '';\n  }\n  isLoggedIn() {\n    const isLoggedIn = this.keycloak.authenticated || false;\n    console.log('=== Checking Login Status ===');\n    console.log('Is logged in:', isLoggedIn);\n    return isLoggedIn;\n  }\n  // FIX: Simplified role checking using tokenParsed directly\n  getUserRoles() {\n    console.log('=== Getting User Roles ===');\n    if (!this.keycloak.tokenParsed) {\n      console.log('No token parsed available');\n      return [];\n    }\n    const realmAccess = this.keycloak.tokenParsed['realm_access'];\n    console.log('Realm Access:', realmAccess);\n    if (!realmAccess || !realmAccess['roles']) {\n      console.log('No roles found in token');\n      return [];\n    }\n    const roles = realmAccess['roles'];\n    console.log('Raw roles from token:', roles);\n    // Format roles to match backend expectations\n    const formattedRoles = roles.map(role => {\n      const roleName = role.toUpperCase();\n      return roleName.startsWith('ROLE_') ? roleName : `ROLE_${roleName}`;\n    });\n    console.log('Formatted roles:', formattedRoles);\n    return formattedRoles;\n  }\n  hasRole(role) {\n    console.log('=== Checking Role ===');\n    console.log('Role to check:', role);\n    const roles = this.getUserRoles();\n    console.log('Available roles:', roles);\n    // Check role with and without ROLE_ prefix\n    const roleToCheck = role.toUpperCase();\n    const hasRole = roles.some(r => r === roleToCheck || r === `ROLE_${roleToCheck}` || r === roleToCheck.replace('ROLE_', ''));\n    console.log('Has role:', hasRole);\n    return hasRole;\n  }\n  isAdmin() {\n    return this.hasRole('admin');\n  }\n  isUser() {\n    return this.hasRole('user');\n  }\n  logout() {\n    console.log('=== Logging out ===');\n    this.keycloak.logout({\n      redirectUri: window.location.origin // Redirect to home page after logout\n    });\n    this.clearRoleCache(); // Clear any cached data\n  }\n  clearRoleCache() {\n    // Clear any cached user data\n    this.cachedRoles = null;\n    console.log('User data cleared');\n  }\n  register() {\n    console.log('=== Redirecting to registration ===');\n    this.keycloak.register({\n      redirectUri: window.location.origin + '/dashboard'\n    });\n  }\n  static ɵfac = function KeycloakService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || KeycloakService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: KeycloakService,\n    factory: KeycloakService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Keycloak","KeycloakService","keycloak","isInitialized","initPromise","cachedRoles","constructor","url","realm","clientId","init","_this","_asyncToGenerator","authenticated","onLoad","checkLoginIframe","pkceMethod","enableLogging","silentCheckSsoRedirectUri","window","location","origin","console","log","token","tokenParsed","getUserRoles","error","getValidToken","_this2","Error","updated","updateToken","length","substring","login","getUsername","isLoggedIn","realmAccess","roles","formattedRoles","map","role","roleName","toUpperCase","startsWith","hasRole","roleToCheck","some","r","replace","isAdmin","isUser","logout","redirectUri","clearRoleCache","register","factory","ɵfac","providedIn"],"sources":["C:\\Users\\adamw\\Football_Auth_Template\\fantasy-ui\\src\\app\\keycloak.service.ts"],"sourcesContent":["// src/app/keycloak.service.ts - FIXED VERSION\r\nimport { Injectable } from '@angular/core';\r\nimport Keycloak from 'keycloak-js';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class KeycloakService {\r\n  private keycloak: Keycloak;\r\n  private isInitialized = false;\r\n  private initPromise: Promise<boolean> | null = null;\r\n  private cachedRoles: string[] | null = null;\r\n\r\n  constructor() {\r\n    this.keycloak = new Keycloak({\r\n      url: 'http://localhost:8180',\r\n      realm: 'football-fantasy',\r\n      clientId: 'angular-client',\r\n    });\r\n  }\r\n\r\n  async init(): Promise<boolean> {\r\n    if (this.initPromise) {\r\n      return this.initPromise;\r\n    }\r\n\r\n    this.initPromise = (async () => {\r\n      try {\r\n        const authenticated = await this.keycloak.init({ \r\n          onLoad: 'login-required',\r\n          checkLoginIframe: false,\r\n          pkceMethod: 'S256',\r\n          enableLogging: true,\r\n          silentCheckSsoRedirectUri: window.location.origin + '/assets/silent-check-sso.html'\r\n        });\r\n        this.isInitialized = true;\r\n        console.log('=== Keycloak Initialization ===');\r\n        console.log('Authenticated:', authenticated);\r\n        console.log('Token:', this.keycloak.token ? 'Present' : 'Missing');\r\n        console.log('Token Parsed:', this.keycloak.tokenParsed);\r\n        console.log('Roles:', await this.getUserRoles()); // FIX: await the promise\r\n        return authenticated;\r\n      } catch (error) {\r\n        console.error('Keycloak initialization failed:', error);\r\n        this.isInitialized = false;\r\n        this.initPromise = null;\r\n        return false;\r\n      }\r\n    })();\r\n\r\n    return this.initPromise;\r\n  }\r\n\r\n  async getValidToken(): Promise<string> {\r\n    if (!this.isInitialized) {\r\n      console.error('Keycloak not initialized');\r\n      throw new Error('Keycloak not initialized');\r\n    }\r\n    \r\n    try {\r\n      console.log('=== Getting Valid Token ===');\r\n      console.log('Current token:', this.keycloak.token ? 'Present' : 'Missing');\r\n      \r\n      const updated = await this.keycloak.updateToken(30);\r\n      console.log('Token updated:', updated);\r\n      \r\n      const token = this.keycloak.token || '';\r\n      console.log('Token length:', token.length);\r\n      console.log('Token preview:', token.substring(0, 50) + '...');\r\n      \r\n      return token;\r\n    } catch (error) {\r\n      console.error('Token refresh failed:', error);\r\n      this.keycloak.login();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n\r\n  login(): void {\r\n    console.log('Redirecting to login...');\r\n    this.keycloak.login();\r\n  }\r\n\r\n  getUsername(): string {\r\n    return this.keycloak.tokenParsed?.['preferred_username'] || '';\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    const isLoggedIn = this.keycloak.authenticated || false;\r\n    console.log('=== Checking Login Status ===');\r\n    console.log('Is logged in:', isLoggedIn);\r\n    return isLoggedIn;\r\n  }\r\n\r\n  // FIX: Simplified role checking using tokenParsed directly\r\n  getUserRoles(): string[] {\r\n    console.log('=== Getting User Roles ===');\r\n    \r\n    if (!this.keycloak.tokenParsed) {\r\n      console.log('No token parsed available');\r\n      return [];\r\n    }\r\n\r\n    const realmAccess = this.keycloak.tokenParsed['realm_access'];\r\n    console.log('Realm Access:', realmAccess);\r\n    \r\n    if (!realmAccess || !realmAccess['roles']) {\r\n      console.log('No roles found in token');\r\n      return [];\r\n    }\r\n\r\n    const roles = realmAccess['roles'];\r\n    console.log('Raw roles from token:', roles);\r\n    \r\n    // Format roles to match backend expectations\r\n    const formattedRoles = roles.map((role: string) => {\r\n      const roleName = role.toUpperCase();\r\n      return roleName.startsWith('ROLE_') ? roleName : `ROLE_${roleName}`;\r\n    });\r\n    \r\n    console.log('Formatted roles:', formattedRoles);\r\n    return formattedRoles;\r\n  }\r\n\r\n  hasRole(role: string): boolean {\r\n    console.log('=== Checking Role ===');\r\n    console.log('Role to check:', role);\r\n    \r\n    const roles = this.getUserRoles();\r\n    console.log('Available roles:', roles);\r\n    \r\n    // Check role with and without ROLE_ prefix\r\n    const roleToCheck = role.toUpperCase();\r\n    const hasRole = roles.some((r: string) => \r\n      r === roleToCheck || \r\n      r === `ROLE_${roleToCheck}` || \r\n      r === roleToCheck.replace('ROLE_', '')\r\n    );\r\n    \r\n    console.log('Has role:', hasRole);\r\n    return hasRole;\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    return this.hasRole('admin');\r\n  }\r\n\r\n  isUser(): boolean {\r\n    return this.hasRole('user');\r\n  }\r\n  logout(): void {\r\n    console.log('=== Logging out ===');\r\n    this.keycloak.logout({\r\n      redirectUri: window.location.origin // Redirect to home page after logout\r\n    });\r\n    this.clearRoleCache(); // Clear any cached data\r\n  }\r\n  private clearRoleCache(): void {\r\n    // Clear any cached user data\r\n    this.cachedRoles = null;\r\n    console.log('User data cleared');\r\n  }\r\n  register(): void {\r\n    console.log('=== Redirecting to registration ===');\r\n    this.keycloak.register({\r\n      redirectUri: window.location.origin + '/dashboard' \r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}