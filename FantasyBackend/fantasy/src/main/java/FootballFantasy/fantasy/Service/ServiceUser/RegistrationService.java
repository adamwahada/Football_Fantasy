package FootballFantasy.fantasy.Service.ServiceUser;

import FootballFantasy.fantasy.Dto.RegisterRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@Slf4j
public class RegistrationService {

    private final RecaptchaService recaptchaService;
    private final KeycloakService keycloakService;

    public void registerUser(RegisterRequest request) {
        log.info("üîÑ D√©but du processus d'enregistrement pour: {}", request.getUsername());

        // 1. V√©rifier le token reCAPTCHA
        log.debug("üîç V√©rification du token reCAPTCHA...");
        boolean captchaVerified = recaptchaService.verifyToken(request.getRecaptchaToken());
        if (!captchaVerified) {
            log.warn("‚ùå √âchec de la v√©rification reCAPTCHA pour: {}", request.getUsername());
            throw new IllegalArgumentException("√âchec de la v√©rification reCAPTCHA");
        }
        log.debug("‚úÖ Token reCAPTCHA v√©rifi√© avec succ√®s");

        // 2. V√©rifier l'acceptation des conditions
        if (!request.isTermsAccepted()) {
            log.warn("‚ùå Conditions non accept√©es pour: {}", request.getUsername());
            throw new IllegalArgumentException("Vous devez accepter les conditions g√©n√©rales");
        }
        log.debug("‚úÖ Conditions g√©n√©rales accept√©es");

        // 3. Cr√©er l'utilisateur dans Keycloak
        try {
            log.debug("üîÑ Cr√©ation de l'utilisateur dans Keycloak...");
            keycloakService.createUser(request);
            log.info("‚úÖ Utilisateur cr√©√© avec succ√®s dans Keycloak: {}", request.getUsername());
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la cr√©ation de l'utilisateur dans Keycloak: {}", e.getMessage(), e);
            throw new RuntimeException("Erreur lors de la cr√©ation du compte utilisateur", e);
        }
    }
}